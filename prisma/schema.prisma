// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int       @id @default(autoincrement())
  firstName  String
  lastName   String
  email      String    @unique
  password   String
  role       String
  avatar     String?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  status     String    @default("active")
  codeId     String?
  codeExpired DateTime?

  bookings   Booking[]
  articles   Article[]
  movieReviews  MovieReview[]
  @@map("users")
}

model Movie {
  id            Int           @id @default(autoincrement())
  title         String
  posterPath    String
  backdropPath  String
  rating        Float
  synopsis      String
  duration      String
  director      String
  writer        String
  country       String
  language      String
  actors        String
  releaseDate   DateTime
  trailerUrl    String
  upcoming      Boolean
  type          String        @default("2D") // 2D, 3D, 4D, IMAX
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  genres        MovieGenre[]
  casts         MovieCast[]
  showtimes     Showtime[]
  movieReviews  MovieReview[]
  @@map("movies")
}

model MovieReview {
  id         Int       @id @default(autoincrement())
  userId     Int
  movieId    Int
  rating     Int       // scale 1-5 chẳng hạn
  comment    String?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  user       User      @relation(fields: [userId], references: [id])
  movie      Movie     @relation(fields: [movieId], references: [id])

  @@unique([userId, movieId])
  @@index([movieId]) // Thêm index cho movieId
  @@map("movieReviews")
}

model Genre {
  id         Int         @id @default(autoincrement())
  name       String
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  movies     MovieGenre[]
  @@map("genres")
}

model MovieGenre {
  id       Int   @id @default(autoincrement())
  movieId  Int
  genreId  Int

  movie    Movie @relation(fields: [movieId], references: [id])
  genre    Genre @relation(fields: [genreId], references: [id])

  @@unique([movieId, genreId])
  @@map("movieGenres")
}

model Actor {
  id         Int         @id @default(autoincrement())
  name       String
  photo      String
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  movies     MovieCast[]
  @@map("actors")
}

model MovieCast {
  id       Int    @id @default(autoincrement())
  movieId  Int
  actorId  Int

  movie    Movie  @relation(fields: [movieId], references: [id])
  actor    Actor  @relation(fields: [actorId], references: [id])

  @@unique([movieId, actorId])
  @@map("movieCasts")
}

model Theater {
  id         Int       @id @default(autoincrement())
  name       String
  logo       String
  location   String
  latitude   Float
  longitude  Float
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  seats      Seat[]
  showtimes  Showtime[]
  @@map("theaters")
}

model Showtime {
  id         Int       @id @default(autoincrement())
  movieId    Int
  theaterId  Int
  date       DateTime
  time       String
  price      Float
  surcharge    Float     @default(0) // Phụ thu (3D, IMAX, giờ cao điểm)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  movie      Movie     @relation(fields: [movieId], references: [id])
  theater    Theater   @relation(fields: [theaterId], references: [id])
  bookings   Booking[]
  @@map("showtimes")
}

model Seat {
  id          Int         @id @default(autoincrement())
  theaterId   Int
  row         String
  number      Int
  type        String
  price       Float
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  theater     Theater     @relation(fields: [theaterId], references: [id])
  bookingSeats BookingSeat[]
  @@map("seats")
}

model Promotion {
  id           Int       @id @default(autoincrement())
  name         String
  discount     Float     // Phần trăm hoặc số tiền giảm
  startDate    DateTime
  endDate      DateTime
  applicableTo String?   // "all", "student", "member", "weekday", etc.
  code         String?   // Mã khuyến mãi (nếu có)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  bookings     Booking[]
  @@map("promotions")
}

model Booking {
  id           Int          @id @default(autoincrement())
  userId       Int
  showtimeId   Int
  promotionId  Int?         // Liên kết với khuyến mãi (nếu có)
  totalPrice   Float
  bookingDate  DateTime
  bookingCode  String
  status       String
  fisrtName    String?      @default("")
  lastName     String?      @default("")
  email        String?      @default("")
  phoneNumber  String?      @default("")
  paymentMethod String?      @default("BANK_TRANSFER")
  images        String?       @default("images.png")
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  user         User         @relation(fields: [userId], references: [id])
  showtime     Showtime     @relation(fields: [showtimeId], references: [id])
  promotion    Promotion?   @relation(fields: [promotionId], references: [id])
  seats        BookingSeat[]
  payments     Payment[]    // Liên kết với bảng Payment
  @@map("bookings")
}

model Payment {
  id            Int       @id @default(autoincrement())
  bookingId     Int       // Liên kết với Booking
  orderId       String    // orderId gửi tới MoMo
  transId       String?   // transId từ MoMo (nếu thanh toán thành công)
  amount        Float     // Số tiền thanh toán
  paymentMethod String    // Phương thức thanh toán (MOMO, BANK_TRANSFER, etc.)
  status        String    // PENDING, SUCCESS, FAILED
  resultCode    Int?      // resultCode từ MoMo (0: thành công, khác: lỗi)
  message       String?   // Thông báo từ MoMo (nếu có)
  signature     String?   // Chữ ký từ MoMo (dùng để kiểm tra tính toàn vẹn)
  requestId     String?   // requestId gửi tới MoMo
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  booking       Booking   @relation(fields: [bookingId], references: [id])

  @@unique([bookingId, orderId])
  @@map("payments")
}

model BookingSeat {
  id         Int       @id @default(autoincrement())
  bookingId  Int
  seatId     Int
  status     String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  booking    Booking   @relation(fields: [bookingId], references: [id])
  seat       Seat      @relation(fields: [seatId], references: [id])

  @@unique([bookingId, seatId])
  @@map("bookingSeats")
}



model ArticleCategory {
  id         Int       @id @default(autoincrement())
  name       String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  articles   Article[]
  @@map("articleCategories")
}

model Article {
  id            Int              @id @default(autoincrement())
  title         String
  excerpt       String
  content       String
  imagePath     String
  categoryId    Int
  authorId      Int
  date          DateTime
  readTime      Int
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt

  category      ArticleCategory  @relation(fields: [categoryId], references: [id])
  author        User             @relation(fields: [authorId], references: [id])
  @@map("articles")
} 

